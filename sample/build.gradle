buildscript {
  dependencies {
    classpath dep.androidPlugin
    classpath dep.butterknifePlugin
    classpath dep.apolloPlugin
    classpath dep.kotlinPlugin
  }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'com.apollographql.apollo'

android {
  compileSdkVersion androidConfig.compileSdkVersion
  buildToolsVersion androidConfig.buildToolsVersion

  defaultConfig {
    applicationId "com.shopify.sample"
    minSdkVersion androidConfig.minSdkVersion
    versionCode 1
    versionName "1.0"
    vectorDrawables.useSupportLibrary = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildTypes {
    all {
      buildConfigField 'okhttp3.logging.HttpLoggingInterceptor.Level', 'OKHTTP_LOG_LEVEL', 'okhttp3.logging.HttpLoggingInterceptor.Level.BODY'

      // We pull the shop settings either from the Environment or a file called shop.properties at the root of the project.
      // Environment variables will take precedence, we will attempt to read those first.
      def shopDomain
      def apiKey
      def androidPayPublicKey
      def androidPayEnvironment
      def locale

      // get the shop setting from the environment if there any
      shopDomain = System.getenv("SHOP_DOMAIN")
      apiKey = System.getenv("API_KEY")
      androidPayPublicKey = System.getenv("ANDROID_PAY_PUBLIC_KEY")
      androidPayEnvironment = System.getenv("ANDROID_PAY_ENVIRONMENT")
      locale = System.getenv("DEFAULT_LOCALE") ?: null

      // pull the store properties from the local file if it exists.  Environment variables take precedence
      def shopProperties = new Properties()
      File shopPropertiesFile = project.file('shop.properties')

      if (shopPropertiesFile.exists()) {
        shopProperties.load(new FileInputStream(shopPropertiesFile))
        shopDomain = shopDomain ?: shopProperties["SHOP_DOMAIN"]
        apiKey = apiKey ?: shopProperties["API_KEY"]
        androidPayPublicKey = androidPayPublicKey ?: shopProperties["ANDROID_PAY_PUBLIC_KEY"]
        androidPayEnvironment = androidPayEnvironment ?: shopProperties["ANDROID_PAY_ENVIRONMENT"]
        locale = shopProperties["DEFAULT_LOCALE"] ?: locale
      }

      if (!shopDomain) {
        shopDomain = ""
      }
      if (!apiKey) {
        apiKey = ""
      }
      if (!androidPayPublicKey) {
        androidPayPublicKey = ""
      }
      if (!androidPayEnvironment) {
        androidPayEnvironment = "com.google.android.gms.wallet.WalletConstants.ENVIRONMENT_SANDBOX"
      }

      buildConfigField "String", "SHOP_DOMAIN", "\"" + shopDomain.toString() + "\""
      buildConfigField "String", "API_KEY", "\"" + apiKey.toString() + "\""
      buildConfigField "String", "DEFAULT_LOCALE", "\"" + locale.toString() + "\""

      debuggable = true
      minifyEnabled = false
    }
  }

  flavorDimensions "whatever"

  productFlavors {
    shopify {
      dimension "whatever"
    }

    xApollo {
      dimension "whatever"
    }
  }

  lintOptions {
    abortOnError false
  }
}

dependencies {
  implementation dep.androidSupportDesign
  implementation dep.androidSupportV4
  implementation dep.androidSupportV7
  implementation dep.androidSupportAnnotations
  implementation dep.rxAndroid
  implementation dep.rxJava
  implementation dep.timber
  implementation dep.butterKnife
  annotationProcessor dep.butterKnifeCompiler
  implementation(dep.fresco) {
    exclude group: 'com.android.support'
  }
  implementation dep.constraintLayout
  implementation dep.rxrelay
  implementation dep.archComponents
  implementation dep.okhttp
  implementation dep.kotlinStdLib
  implementation dep.buySdk
  implementation dep.gson
  implementation dep.androidXBrowser

  xApolloImplementation dep.apolloRuntime
  xApolloImplementation dep.okhttpLogging
  xApolloImplementation dep.apolloHttpCache
}

apollo {
  customTypeMapping = [
      "URL" : "String",
      "HTML" : "String",
      "Money" : "java.math.BigDecimal"
  ]
  nullableValueType = "apolloOptional"
  useSemanticNaming = false
  // The schema can be updated by running the command `./gradlew downloadStorefrontApolloSchema`
  service("storefront") {
    schemaPath = 'com/shopify/sample/domain/schema.json'
    introspection {
      sourceSetName = 'xApollo'
      endpointUrl = 'https://graphql.myshopify.com/api/2021-07/graphql.json'
      headers = [
        'X-Shopify-Storefront-Access-Token' : '8e2fef6daed4b93cf4e731f580799dd1'
      ]
    }
  }
}
